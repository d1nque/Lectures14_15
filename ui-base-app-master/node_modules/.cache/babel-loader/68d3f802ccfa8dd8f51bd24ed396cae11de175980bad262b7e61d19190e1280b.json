{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport * as PAGES from 'constants/pages';\nimport useChangePage from 'hooks/useChangePage';\nimport useAccessValidate from 'hooks/useAccessValidate';\nimport useLocationSearch from 'hooks/useLocationSearch';\nconst initialState = {\n  isValid: false\n};\nconst PageAccessValidator = _ref => {\n  _s();\n  let {\n    neededAuthorities = [],\n    children\n  } = _ref;\n  const [state, setState] = useState(initialState);\n  const changePage = useChangePage();\n  const location = useLocation();\n  const locationSearch = useLocationSearch();\n  const user = useSelector(_ref2 => {\n    let {\n      user\n    } = _ref2;\n    return user;\n  });\n  const hasAuthAccess = useAccessValidate({\n    ownedAuthorities: user.authorities,\n    neededAuthorities\n  });\n  useEffect(() => {\n    if (!user.isFetchingUser) {\n      if (!user.isAuthorized) {\n        changePage({\n          locationSearch: {\n            ...locationSearch,\n            redirectPathname: location.pathname,\n            redirectLocationSearch: JSON.stringify(locationSearch)\n          },\n          path: `/${PAGES.LOGIN}`\n        });\n      } else if (!hasAuthAccess) {\n        changePage({\n          locationSearch,\n          path: `/${PAGES.INITIAL}`\n        });\n      } else {\n        setState(prevState => ({\n          ...prevState,\n          isValid: true\n        }));\n      }\n    }\n  }, [user.isFetchingUser, user.isAuthorized, hasAuthAccess]);\n  return state.isValid ? children : null;\n};\n_s(PageAccessValidator, \"vE/+5WgctSV3IEd1UqEOdC7UfMQ=\", false, function () {\n  return [useChangePage, useLocation, useLocationSearch, useSelector, useAccessValidate];\n});\n_c = PageAccessValidator;\nexport default PageAccessValidator;\nvar _c;\n$RefreshReg$(_c, \"PageAccessValidator\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useSelector","PAGES","useChangePage","useAccessValidate","useLocationSearch","initialState","isValid","PageAccessValidator","neededAuthorities","children","state","setState","changePage","location","locationSearch","user","hasAuthAccess","ownedAuthorities","authorities","isFetchingUser","isAuthorized","redirectPathname","pathname","redirectLocationSearch","JSON","stringify","path","LOGIN","INITIAL","prevState"],"sources":["C:/Users/d1nque/Desktop/ui-base-app-master/src/components/PageAccessValidator/PageAccessValidator.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport * as PAGES from 'constants/pages';\nimport useChangePage from 'hooks/useChangePage';\nimport useAccessValidate from 'hooks/useAccessValidate';\nimport useLocationSearch from 'hooks/useLocationSearch';\n\nconst initialState = {\n  isValid: false,\n};\n\nconst PageAccessValidator = ({\n  neededAuthorities = [],\n  children,\n}) => {\n  const [state, setState] = useState(initialState);\n  const changePage = useChangePage();\n  const location = useLocation();\n  const locationSearch = useLocationSearch();\n  const user = useSelector(({ user }) => user);\n  const hasAuthAccess = useAccessValidate({\n    ownedAuthorities: user.authorities,\n    neededAuthorities,\n  });\n  useEffect(() => {\n    if (!user.isFetchingUser) {\n      if (!user.isAuthorized) {\n        changePage({\n          locationSearch: {\n            ...locationSearch,\n            redirectPathname: location.pathname,\n            redirectLocationSearch: JSON.stringify(locationSearch),\n          },\n          path: `/${PAGES.LOGIN}`,\n        });\n      } else if (!hasAuthAccess) {\n        changePage({\n          locationSearch,\n          path: `/${PAGES.INITIAL}`,\n        });\n      } else {\n        setState(prevState => ({\n          ...prevState,\n          isValid: true,\n        }));\n      }\n    }\n  }, [user.isFetchingUser, user.isAuthorized, hasAuthAccess]);\n\n  return state.isValid ? children : null;\n};\n\nexport default PageAccessValidator;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,QAAQ,aAAa;AAEzC,OAAO,KAAKC,KAAK,MAAM,iBAAiB;AACxC,OAAOC,aAAa,MAAM,qBAAqB;AAC/C,OAAOC,iBAAiB,MAAM,yBAAyB;AACvD,OAAOC,iBAAiB,MAAM,yBAAyB;AAEvD,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,mBAAmB,GAAG,QAGtB;EAAA;EAAA,IAHuB;IAC3BC,iBAAiB,GAAG,EAAE;IACtBC;EACF,CAAC;EACC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAACO,YAAY,CAAC;EAChD,MAAMO,UAAU,GAAGV,aAAa,EAAE;EAClC,MAAMW,QAAQ,GAAGd,WAAW,EAAE;EAC9B,MAAMe,cAAc,GAAGV,iBAAiB,EAAE;EAC1C,MAAMW,IAAI,GAAGf,WAAW,CAAC;IAAA,IAAC;MAAEe;IAAK,CAAC;IAAA,OAAKA,IAAI;EAAA,EAAC;EAC5C,MAAMC,aAAa,GAAGb,iBAAiB,CAAC;IACtCc,gBAAgB,EAAEF,IAAI,CAACG,WAAW;IAClCV;EACF,CAAC,CAAC;EACFX,SAAS,CAAC,MAAM;IACd,IAAI,CAACkB,IAAI,CAACI,cAAc,EAAE;MACxB,IAAI,CAACJ,IAAI,CAACK,YAAY,EAAE;QACtBR,UAAU,CAAC;UACTE,cAAc,EAAE;YACd,GAAGA,cAAc;YACjBO,gBAAgB,EAAER,QAAQ,CAACS,QAAQ;YACnCC,sBAAsB,EAAEC,IAAI,CAACC,SAAS,CAACX,cAAc;UACvD,CAAC;UACDY,IAAI,EAAG,IAAGzB,KAAK,CAAC0B,KAAM;QACxB,CAAC,CAAC;MACJ,CAAC,MAAM,IAAI,CAACX,aAAa,EAAE;QACzBJ,UAAU,CAAC;UACTE,cAAc;UACdY,IAAI,EAAG,IAAGzB,KAAK,CAAC2B,OAAQ;QAC1B,CAAC,CAAC;MACJ,CAAC,MAAM;QACLjB,QAAQ,CAACkB,SAAS,KAAK;UACrB,GAAGA,SAAS;UACZvB,OAAO,EAAE;QACX,CAAC,CAAC,CAAC;MACL;IACF;EACF,CAAC,EAAE,CAACS,IAAI,CAACI,cAAc,EAAEJ,IAAI,CAACK,YAAY,EAAEJ,aAAa,CAAC,CAAC;EAE3D,OAAON,KAAK,CAACJ,OAAO,GAAGG,QAAQ,GAAG,IAAI;AACxC,CAAC;AAAC,GAvCIF,mBAAmB;EAAA,QAKJL,aAAa,EACfH,WAAW,EACLK,iBAAiB,EAC3BJ,WAAW,EACFG,iBAAiB;AAAA;AAAA,KATnCI,mBAAmB;AAyCzB,eAAeA,mBAAmB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}