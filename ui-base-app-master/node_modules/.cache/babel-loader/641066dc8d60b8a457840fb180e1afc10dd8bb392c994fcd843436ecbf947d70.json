{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport * as LANGUAGES from 'constants/languages';\nconst DEFAULT_LOCATION_SEARCH = {\n  lang: LANGUAGES.en\n};\nconst searchToObject = search => {\n  const params = new URLSearchParams(search);\n  let result = {};\n  for (let param of params) {\n    // each 'entry' is a [key, value] tupple\n    const [key, value] = param;\n    result[key] = value;\n  }\n  return result;\n};\nconst getInvalidLocationSearchParams = locationSearch => {\n  const {\n    lang\n  } = locationSearch;\n  const invalidParams = [];\n  if (!Object.keys(LANGUAGES).includes(lang)) {\n    invalidParams.push('lang');\n  }\n  return invalidParams;\n};\nconst getValidLocationSearch = (inputLocationSearch, invalidLocationSearchParams) => {\n  const validLocationSearch = {\n    ...DEFAULT_LOCATION_SEARCH,\n    ...(inputLocationSearch || {})\n  };\n  invalidLocationSearchParams.forEach(invalidParamKey => validLocationSearch[invalidParamKey] = DEFAULT_LOCATION_SEARCH[invalidParamKey]);\n  return validLocationSearch;\n};\nconst useLocationSearch = () => {\n  _s();\n  const {\n    search\n  } = useLocation();\n  const history = useHistory();\n  return useMemo(() => {\n    const locationSearch = searchToObject(search);\n    const invalidLocationSearchParams = getInvalidLocationSearchParams(locationSearch);\n    const validLocationSearch = getValidLocationSearch(locationSearch, invalidLocationSearchParams);\n    if (invalidLocationSearchParams.length) {\n      history.replace({\n        pathname: history.location.pathname,\n        search: `?${new URLSearchParams(validLocationSearch).toString()}`\n      });\n    }\n    return validLocationSearch;\n  }, [history.location.pathname, search]);\n};\n_s(useLocationSearch, \"6WmLjyK5msmQ1fIQqtPKzqMTDQ4=\", false, function () {\n  return [useLocation, useHistory];\n});\nexport default useLocationSearch;","map":{"version":3,"names":["useMemo","useHistory","useLocation","LANGUAGES","DEFAULT_LOCATION_SEARCH","lang","en","searchToObject","search","params","URLSearchParams","result","param","key","value","getInvalidLocationSearchParams","locationSearch","invalidParams","Object","keys","includes","push","getValidLocationSearch","inputLocationSearch","invalidLocationSearchParams","validLocationSearch","forEach","invalidParamKey","useLocationSearch","history","length","replace","pathname","location","toString"],"sources":["C:/Users/d1nque/Desktop/ui-base-app-master/src/hooks/useLocationSearch/index.js"],"sourcesContent":["import { useMemo } from 'react';\nimport {\n  useHistory,\n  useLocation,\n} from 'react-router-dom';\nimport * as LANGUAGES from 'constants/languages';\n\nconst DEFAULT_LOCATION_SEARCH = {\n  lang: LANGUAGES.en,\n};\n\nconst searchToObject = (search) => {\n  const params = new URLSearchParams(search);\n  let result = {};\n  for(let param of params) { // each 'entry' is a [key, value] tupple\n    const [key, value] = param;\n    result[key] = value;\n  }\n  return result;\n};\n\nconst getInvalidLocationSearchParams = (locationSearch) => {\n  const {\n    lang,\n  } = locationSearch;\n  const invalidParams = [];\n\n  if (!Object.keys(LANGUAGES).includes(lang)) {\n    invalidParams.push('lang');\n  }\n\n  return invalidParams;\n};\n\nconst getValidLocationSearch = (inputLocationSearch, invalidLocationSearchParams) => {\n  const validLocationSearch = {\n    ...DEFAULT_LOCATION_SEARCH,\n    ...(inputLocationSearch || {}),\n  };\n  invalidLocationSearchParams\n    .forEach(invalidParamKey => validLocationSearch[invalidParamKey] = DEFAULT_LOCATION_SEARCH[invalidParamKey]);\n  return validLocationSearch;\n};\n\nconst useLocationSearch = () => {\n  const {\n    search,\n  } = useLocation();\n  const history = useHistory();\n\n  return useMemo(() => {\n    const locationSearch = searchToObject(search);\n    const invalidLocationSearchParams = getInvalidLocationSearchParams(locationSearch);\n    const validLocationSearch = getValidLocationSearch(locationSearch, invalidLocationSearchParams);\n\n    if (invalidLocationSearchParams.length) {\n      history.replace({\n        pathname: history.location.pathname,\n        search: `?${new URLSearchParams(validLocationSearch).toString()}`,\n      });\n    }\n    return validLocationSearch;\n  }, [history.location.pathname, search]);\n};\n\nexport default useLocationSearch;\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SACEC,UAAU,EACVC,WAAW,QACN,kBAAkB;AACzB,OAAO,KAAKC,SAAS,MAAM,qBAAqB;AAEhD,MAAMC,uBAAuB,GAAG;EAC9BC,IAAI,EAAEF,SAAS,CAACG;AAClB,CAAC;AAED,MAAMC,cAAc,GAAIC,MAAM,IAAK;EACjC,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAACF,MAAM,CAAC;EAC1C,IAAIG,MAAM,GAAG,CAAC,CAAC;EACf,KAAI,IAAIC,KAAK,IAAIH,MAAM,EAAE;IAAE;IACzB,MAAM,CAACI,GAAG,EAAEC,KAAK,CAAC,GAAGF,KAAK;IAC1BD,MAAM,CAACE,GAAG,CAAC,GAAGC,KAAK;EACrB;EACA,OAAOH,MAAM;AACf,CAAC;AAED,MAAMI,8BAA8B,GAAIC,cAAc,IAAK;EACzD,MAAM;IACJX;EACF,CAAC,GAAGW,cAAc;EAClB,MAAMC,aAAa,GAAG,EAAE;EAExB,IAAI,CAACC,MAAM,CAACC,IAAI,CAAChB,SAAS,CAAC,CAACiB,QAAQ,CAACf,IAAI,CAAC,EAAE;IAC1CY,aAAa,CAACI,IAAI,CAAC,MAAM,CAAC;EAC5B;EAEA,OAAOJ,aAAa;AACtB,CAAC;AAED,MAAMK,sBAAsB,GAAG,CAACC,mBAAmB,EAAEC,2BAA2B,KAAK;EACnF,MAAMC,mBAAmB,GAAG;IAC1B,GAAGrB,uBAAuB;IAC1B,IAAImB,mBAAmB,IAAI,CAAC,CAAC;EAC/B,CAAC;EACDC,2BAA2B,CACxBE,OAAO,CAACC,eAAe,IAAIF,mBAAmB,CAACE,eAAe,CAAC,GAAGvB,uBAAuB,CAACuB,eAAe,CAAC,CAAC;EAC9G,OAAOF,mBAAmB;AAC5B,CAAC;AAED,MAAMG,iBAAiB,GAAG,MAAM;EAAA;EAC9B,MAAM;IACJpB;EACF,CAAC,GAAGN,WAAW,EAAE;EACjB,MAAM2B,OAAO,GAAG5B,UAAU,EAAE;EAE5B,OAAOD,OAAO,CAAC,MAAM;IACnB,MAAMgB,cAAc,GAAGT,cAAc,CAACC,MAAM,CAAC;IAC7C,MAAMgB,2BAA2B,GAAGT,8BAA8B,CAACC,cAAc,CAAC;IAClF,MAAMS,mBAAmB,GAAGH,sBAAsB,CAACN,cAAc,EAAEQ,2BAA2B,CAAC;IAE/F,IAAIA,2BAA2B,CAACM,MAAM,EAAE;MACtCD,OAAO,CAACE,OAAO,CAAC;QACdC,QAAQ,EAAEH,OAAO,CAACI,QAAQ,CAACD,QAAQ;QACnCxB,MAAM,EAAG,IAAG,IAAIE,eAAe,CAACe,mBAAmB,CAAC,CAACS,QAAQ,EAAG;MAClE,CAAC,CAAC;IACJ;IACA,OAAOT,mBAAmB;EAC5B,CAAC,EAAE,CAACI,OAAO,CAACI,QAAQ,CAACD,QAAQ,EAAExB,MAAM,CAAC,CAAC;AACzC,CAAC;AAAC,GAnBIoB,iBAAiB;EAAA,QAGjB1B,WAAW,EACCD,UAAU;AAAA;AAiB5B,eAAe2B,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}